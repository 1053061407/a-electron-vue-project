{"version":3,"sources":["../../../../src/renderer/api/index.js"],"names":["service","create","withCredentials","baseURL","timeout","interceptors","request","use","getters","token","config","console","log","error","reject","response"],"mappings":";;;;;;;;;;AAAA;;;;AAEA;;;;;;AAIA,IAAMA,UAAU,gBAAMC,MAAN,CAAa;AAC3BC,mBAAiB,IADU;;AAG3BC,WAAS,uBAHkB;AAI3BC,WAAS,KAJkB,EAAb,CAAhB;;AAQAJ,QAAQK,YAAR,CAAqBC,OAArB,CAA6BC,GAA7B,CAAiC,kBAAU;AACzC,MAAI,gBAAMC,OAAN,CAAcC,KAAlB,EAAyB,CAExB;AACD,SAAOC,MAAP;AACD,CALD,EAKG,iBAAS;AAEVC,UAAQC,GAAR,CAAYC,KAAZ;AACA,oBAAQC,MAAR,CAAeD,KAAf;AACD,CATD;;AAYAb,QAAQK,YAAR,CAAqBU,QAArB,CAA8BR,GAA9B;;kBAyCeP,O","file":"index.js","sourcesContent":["import axios from 'axios'\n// import { Message, MessageBox } from 'element-ui'\nimport store from '../store'\n// import { getToken } from '@/utils/auth'\n\n// 创建axios实例\nconst service = axios.create({\n  withCredentials: true,\n  // baseURL: 'http://localhost:3000',\n  baseURL: 'http://localhost:3000', // api的base_url\n  timeout: 15000 // 请求超时时间\n})\n\n// request拦截器\nservice.interceptors.request.use(config => {\n  if (store.getters.token) {\n    // config.headers['X-Token'] = getToken() // 让每个请求携带自定义token 请根据实际情况自行修改\n  }\n  return config\n}, error => {\n  // Do something with request error\n  console.log(error) // for debug\n  Promise.reject(error)\n})\n\n// respone拦截器\nservice.interceptors.response.use(\n  // response => {\n  // /**\n  // * code为非20000是抛错 可结合自己业务进行修改\n  // */\n  //   const res = response.data\n  //   if (res.code !== 20000) {\n  //     Message({\n  //       message: res.data,\n  //       type: 'error',\n  //       duration: 5 * 1000\n  //     })\n  //\n  //     // 50008:非法的token; 50012:其他客户端登录了;  50014:Token 过期了;\n  //     if (res.code === 50008 || res.code === 50012 || res.code === 50014) {\n  //       MessageBox.confirm('你已被登出，可以取消继续留在该页面，或者重新登录', '确定登出', {\n  //         confirmButtonText: '重新登录',\n  //         cancelButtonText: '取消',\n  //         type: 'warning'\n  //       }).then(() => {\n  //         store.dispatch('FedLogOut').then(() => {\n  //           location.reload()// 为了重新实例化vue-router对象 避免bug\n  //         })\n  //       })\n  //     }\n  //     return Promise.reject('error')\n  //   } else {\n  //     return response.data\n  //   }\n  // },\n  // error => {\n  //   console.log('err' + error)// for debug\n  //   Message({\n  //     message: error.message,\n  //     type: 'error',\n  //     duration: 5 * 1000\n  //   })\n  //   return Promise.reject(error)\n  // }\n)\n\nexport default service\n"]}